# A YAML configuration file can contain multiple top-level keys (like 'folio_help' below).
# Each key represents a named configuration 'set' that can be invoked using the
# '-export <set_name>' command-line argument. This allows you to manage
# different export configurations for various projects or scenarios within a single file.
folio_help:

  # ---------------------------------------------------------------------------
  # Infobase Definitions (List) - REQUIRED
  # ---------------------------------------------------------------------------
  # Defines one or more infobases to be processed together within this set.
  # Processing them together allows for cross-infobase link resolution.
  infobases:
    - # --- First Infobase Definition ---
      # id: (String) A unique identifier for this infobase within the set. REQUIRED.
      #     Used in output filenames/paths via the {id} placeholder.
      #     Should be a valid XML identifier (no spaces, starts with letter/underscore).
      id: foliohelp
      # path: (String) Path to the .FFF file. REQUIRED.
      #       Relative paths are resolved against the directory containing this YAML file.
      #       *** Inside Docker, MUST start with /data/ (e.g., /data/input/file.fff) ***
      path: /data/input/FolioHlp.fff
      # aliases: (List<String>) Optional list of alternative names or original paths
      #          (e.g., original .NFO filename) for this infobase. Used for
      #          resolving incoming links from other infobases in the set.
      # aliases:
      #   - 'C:\Path\To\Original.NFO' # Windows path example
      #   - '/path/to/original.nfo'      # Linux/Mac path example
      #   - 'OriginalName'
      # index_dir: (String) Override the Lucene index path for this specific infobase.
      #            If specified, this infobase gets its own index. If omitted or null,
      #            it uses the shared 'export_locations.luceneindex.path' (if defined)
      #            or defaults based on 'export_locations.default.path'.
      #            Path MUST end with a slash. Use /data/ prefix in Docker.
      # index_dir: /data/index/foliohelp_specific_index/

    - # --- Second Infobase Definition (Example) ---
      id: foliohelp_alt # Different ID
      path: /data/input/FolioHlp.fff # Same input file
      # aliases:
      #   - FolioHlp_Copy.NFO
      # export_locations: # Override export locations for this specific infobase
      #   html:
      #     path: "/data/export/{id}-alternate-html/{input}.html"
      # index_dir: Override index path for this specific infobase
      index_dir: /data/index/foliohelp_alt_index

  # ---------------------------------------------------------------------------
  # Export Locations - REQUIRED (Defines output paths/URLs)
  # ---------------------------------------------------------------------------
  # Keys are asset types: 'default', 'image', 'luceneindex', 'html', 'xml', 'text', 'css', 'javascript', etc.
  # Define output locations using filesystem paths and optional public URLs.
  # Templates support:
  #   {id}    - The 'id' of the infobase being processed.
  #   {stamp} - A timestamp string (e.g., YYYY-MM-DD_HHMMSS).
  #   {input} - The base filename derived from splitting rules (structure provider) or a default.
  #             For images/assets, it might be the original filename or a generated ID
  #             (see asset_use_index_in_url).
  # *** Inside Docker, paths MUST be relative to /data (e.g., start with /data/export/, /data/index/) ***
  export_locations:
    # 'default': Used as a fallback for asset types without a specific entry below
    #            (e.g., logs, css, js, generated reports). REQUIRED.
    default:
      # path: (String) Local file system path template. REQUIRED.
      path: "/data/export/{id}-{stamp}/{input}"
      # url: (String) Optional. Public URL template corresponding to the path.
      #      If provided, links in the output (e.g., to CSS, JS) will use this URL structure.
      # url: "http://example.com/exports/{id}/{input}"
      # find: (String) Optional. Regex pattern to find in the {input} variable.
      # replace: (String) Optional. Replacement string for the 'find' pattern.
      #          Use these for advanced renaming within the path/url templates.

    # 'luceneindex': Specifies the directory for the Lucene index. REQUIRED if resolve_query_links=true.
    # If defined here, all infobases in this set *without* their own 'index_dir' override
    # will be indexed *together* into this single location. This is crucial for resolving
    # query links (QL) that target records across different infobases within this set.
    # Path MUST end with a slash. Use /data/ prefix in Docker.
    luceneindex:
      path: "/data/index/"

    # 'image': Specifies path/URL for images referenced in the content.
    # NOTE: FolioXML command-line export provides *limited* automatic handling.
    # It might rename some linked images and convert BMP->PNG, placing them according
    # to this 'path'. However, manual steps are typically REQUIRED after export:
    # 1. Manually copy the original 'objects' folder content to the output image location.
    # 2. Manually convert non-web formats (WMF, HGX, etc.) using external tools.
    # 3. Manually search/replace image 'src' attributes in the output HTML/XML to point
    #    to the correct, converted image files and paths.
    # See README section "Handling Embedded Objects".
    image:
      # path: (String) Filesystem path template for placing processed/referenced images.
      path: /data/export/{input} # Example: Places images directly in the main export folder
      # path: /data/export/{id}-{stamp}/images/{input} # Example: Places images in a subfolder
      # url: (String) Optional. Public URL template for image 'src' attributes.
      # url: "http://example.com/images/{input}"

    # 'html': Specifies path/URL for generated HTML files (if export_html: true).
    html:
      # path: (String) Filesystem path template for generated HTML files. REQUIRED if export_html: true.
      path: "/data/export/{id}-{stamp}/{input}.html"
      # url: (String) Optional. Public URL template used for cross-page links if provided.
      # url: "http://example.com/html/{id}/{input}.html"

    # 'xml': Specifies the path/URL for the single exported XML file (if export_xml: true).
    xml:
      # path: (String) Filesystem path for the single XML output file. REQUIRED if export_xml: true.
      path: "/data/export/{id}-{stamp}.xml"
      # url: (String) Optional. Public URL for the XML file.
      # url: "http://example.com/xml/{id}.xml"

    # --- Other asset types (examples) ---
    # Define specific locations if needed, otherwise 'default' is used.
    # css:
    #   path: "/data/export/assets/css/{input}"
    #   url: "/assets/css/{input}"
    # javascript:
    #   path: "/data/export/assets/js/{input}"
    #   url: "/assets/js/{input}"
    # text: # For plain text output if enabled elsewhere
    #   path: "/data/export/text/{id}/{input}.txt"


  # ---------------------------------------------------------------------------
  # Core Export Options
  # ---------------------------------------------------------------------------

  # export_xml: (Boolean) Export the entire infobase content as a single, large XML file?
  #             (Default: true)
  export_xml: false # Set to false if you only need HTML or other formats.

  # export_html: (Boolean) Export content as multiple linked HTML files?
  #              Requires a 'structure_provider' to define how splitting occurs.
  #              (Default: true)
  export_html: true

  # ---------------------------------------------------------------------------
  # XML Export Specific Options (Ignored if export_xml: false)
  # ---------------------------------------------------------------------------

  # indent_xml: (Boolean) Add indentation (whitespace) to the output XML for human readability?
  #             Set to 'false' for machine processing, as indentation can sometimes
  #             introduce unwanted spacing when the XML is rendered. (Default: true)
  indent_xml: false # Set to false for cleaner machine processing

  # nest_file_elements: (Boolean) Use nested <file> elements in the XML output, mirroring
  #                       the Folio hierarchy? If false, uses a flat structure. (Default: true)
  # nest_file_elements: true

  # skip_normal_records: (Boolean) XML Only. Include only records that affect the hierarchy
  #                        (e.g., those matching structure provider rules)? Creates a smaller
  #                        XML file, omitting content from intermediate records. (Default: false)
  # skip_normal_records: false

  # ---------------------------------------------------------------------------
  # HTML Export Specific Options (Ignored if export_html: false)
  # ---------------------------------------------------------------------------

  # add_nav_links: (Boolean) HTML Only. Add 'Previous'/'Next' navigation links at the
  #                top and bottom of each generated HTML page? (Default: true)
  add_nav_links: true

  # ---------------------------------------------------------------------------
  # Link Resolution Options
  # ---------------------------------------------------------------------------

  # resolve_jump_links: (Boolean) Attempt to resolve Folio jump links (JI, JT, etc.)
  #                     to target the correct record/location within the exported
  #                     content (HTML or XML)? (Default: true)
  resolve_jump_links: true

  # resolve_query_links: (Boolean) Attempt to resolve Folio query links (QL)?
  #                      Requires 'folioxml-lucene' dependency. Builds a Lucene index
  #                      (at 'export_locations.luceneindex.path') and attempts to find the
  #                      first matching record for each query link, creating a hyperlink
  #                      to it. Can link across infobases if they are indexed together.
  #                      If false, query links might remain unresolved or be logged. (Default: true)
  resolve_query_links: true

  # use_highslide: (Boolean) Use Highslide JS markup (<a class="highslide"...>) for Folio
  #                  popups and notes? Affects both XML and HTML output.
  #                  If true, you MUST include the Highslide JS and CSS files in your
  #                  final HTML deployment for the popups to function.
  #                  If false, popups/notes might be rendered inline or dropped (see 'pull' section).
  #                  (Default: true)
  use_highslide: true

  # ---------------------------------------------------------------------------
  # Structure Provider (Controls HTML Splitting and Output Filenames/Slugs)
  # ---------------------------------------------------------------------------
  # Relevant only if export_html: true. Determines how the infobase is split
  # into multiple HTML files and how those files are named (the {input} template variable).
  # If not specified, HTML export might produce a single large file or use default behavior.

  # structure_class: (String) Fully qualified Java class name implementing IStructureProvider.
  # Common options:
  #   "folioxml.export.structure.SlugProvider": Generates URL-friendly slugs (filenames)
  #       from the text content of records matching specific Folio Level names. Default choice.
  #   "folioxml.export.structure.IdSlugProvider": Generates numeric, GUID, or other ID-based
  #       filenames, potentially splitting based on Levels or Fields. More complex configuration.
  #   "folioxml.export.structure.SplitByFieldNameProvider": Splits the infobase into a new
  #       HTML file whenever a specific Folio Field is encountered.
  #   "folioxml.export.structure.FolioUuidProvider": Uses internal Folio UUIDs for filenames.
  structure_class: folioxml.export.structure.SlugProvider

  # structure_class_params: (List) Constructor parameters for the specified structure_class.
  # The required parameters depend on the class:

  # --- Parameters for SlugProvider ---
  # structure_class_params: [ levelRegex ]
  #   levelRegex: (String) A Java regex pattern matching the Folio Level names that should
  #               trigger a new HTML file split. The slug is generated from the record's title.
  #               Example: "Heading 1|Chapter|Title"
  structure_class_params:
    - "Book|Section" # Splits on records with Level "Book" or "Section"

  # --- Parameters for IdSlugProvider ---
  # structure_class_params: [ levelRegex, splitOnFieldName, idKind, root_index, start_index ]
  #   levelRegex: (String or null) Regex for Folio Levels to split on (similar to SlugProvider).
  #               Use null if splitting only by field name.
  #   splitOnFieldName: (String or null) Name of a Folio Field (e.g., "PageBreak", "ArticleID").
  #                     A new file is created when this field is encountered in a record. Use null
  #                     if splitting only by levelRegex. Specify *one* of levelRegex or splitOnFieldName.
  #   idKind: (Integer) Determines the type of filename ({input}) generated:
  #           0: heading-based slugs (like SlugProvider)
  #           1: simple integers (1, 2, 3, ...)
  #           2: nested integers (1.1, 1.2, 2.1, ...) - requires root_index, start_index
  #           3: GUIDs (UUIDs)
  #           4: Folio Record IDs (e.g., "fr1234")
  #           5-9: Use the *content* of 'splitOnFieldName' as the filename.
  #                Fall back to schemes 0-4 respectively if the field is missing, empty, or not unique.
  #                Example: idKind=9 with splitOnFieldName="FILEID" uses the FILEID field content,
  #                         falling back to Folio Record IDs (4) if needed.
  #   root_index: (Integer) Starting root number for nested integers (idKind=2 or 7). Default: 0 or 1.
  #   start_index: (Integer) Starting index for simple or nested integers (idKind=1, 2, 6, 7). Default: 1.
  # Example using IdSlugProvider to split on a field and use numeric IDs:
  # structure_class: folioxml.export.structure.IdSlugProvider
  # structure_class_params: [ null, "ArticleID", 1, 0, 1 ] # Split on ArticleID field, use integer IDs 1, 2, 3...
  # Example using IdSlugProvider to split on levels and use content of FILEID field (fallback to Folio IDs):
  # structure_class: folioxml.export.structure.IdSlugProvider
  # structure_class_params: [ "Chapter|Section", "FILEID", 9, 1, 1 ]

  # --- Parameters for SplitByFieldNameProvider ---
  # structure_class_params: [ fieldName ]
  #   fieldName: (String) The name of the Folio Field to split on. Filenames typically default to numeric.
  # Example:
  # structure_class: folioxml.export.structure.SplitByFieldNameProvider
  # structure_class_params: [ "PageBreak" ]


  # ---------------------------------------------------------------------------
  # Content Filtering ('Pulling' or 'Dropping')
  # ---------------------------------------------------------------------------
  # Specify which types of Folio features or links should be kept or discarded.
  # Dropped/pulled elements are usually logged (e.g., log_pulled_elements.txt).
  pull:
    # program_links: (Boolean) Keep Program Links (PG)? (Default: true)
    program_links: true
    # menu_links: (Boolean) Keep Menu Links (MN)? (Default: true)
    menu_links: true
    # drop_notes: (Boolean) Remove ('drop') Folio Notes (<NT>)? If true, notes content is discarded.
    #             If false (default), notes are typically handled by 'use_highslide'. (Default: false)
    # drop_notes: false
    # drop_popups: (Boolean) Remove ('drop') Folio Popups (<PU>)? If true, popup content is discarded.
    #              If false (default), popups are typically handled by 'use_highslide'. (Default: false)
    # drop_popups: false
    # ole_objects: (Boolean) Keep references to OLE Objects? These are usually not renderable
    #              in HTML and require manual handling. Setting to 'false' might simplify output. (Default: true)
    # ole_objects: true # Keep the <object> tags, requires manual handling later
    # metafile_objects: (Boolean) Keep references to Metafile objects (WMF, EMF)? Similar to OLE,
    #                   these often require manual conversion and link fixing. (Default: true)
    # metafile_objects: true # Keep the tags, requires manual handling later
    # links_to_infobases: (List<String>) A list of target infobase aliases (or original .NFO paths)
    #                     for which all *incoming* links should be dropped/removed. Useful for
    #                     excluding links to obsolete or irrelevant infobases.
    # links_to_infobases:
    #   - 'C:\Path\To\Obsolete.NFO'
    #   - 'OldSystemData'

  # ---------------------------------------------------------------------------
  # Link Mapping (Manual Overrides for Broken Links)
  # ---------------------------------------------------------------------------
  # Provides a way to manually fix broken external links or remap links to specific
  # infobases, especially useful if the target paths have changed.
  link_mapper:
    # urls: (Map<String, String>) Map specific file paths found in data links (DA) or
    #       object links (OB) to new URLs. The key is the exact path string found in the FFF file.
    urls:
      # 'C:\Path\On\Old\Server\document.pdf': 'http://new.example.com/docs/document.pdf'
      # '/usr/local/share/data.doc': 'http://new.example.com/legacy/data.doc'
    # infobases: (Map<String, String>) Map target infobase identifiers (original NFO paths or
    #            aliases used in JI, JT, QL links) to a new base URL or path. If a link targets
    #            an infobase listed here, its generated URL will be prefixed with the mapped value.
    infobases:
      # 'C:\Path\To\OldInfobase.NFO': 'http://new.example.com/infobases/new_infobase/'
      # 'PROD_System': '/archived/prod_system_export/'

  # ---------------------------------------------------------------------------
  # Logging & Reporting Options
  # ---------------------------------------------------------------------------
  # export_inventory: (Boolean) Generate 'log_report.txt' (or similar name based on export_locations)?
  #                   This file tracks unique elements, styles, fields, link types, etc.,
  #                   encountered during processing. Useful for understanding infobase structure.
  #                   Can have a minor performance impact. (Default: true)
  export_inventory: true

  # export_hidden_text: (Boolean) Generate 'log_hidden_text.txt' (or similar name)?
  #                     Lists text content that might be hidden in Folio Views (e.g., via
  #                     zero-contrast colors or hidden character styles) and might be hidden
  #                     by the default CSS generated. Can have a significant performance impact. (Default: true)
  export_hidden_text: true

  # ---------------------------------------------------------------------------
  # Advanced / Less Common Options
  # ---------------------------------------------------------------------------

  # --- Faux Tabs (Experimental) ---
  # Attempts to simulate Folio's tab stops using spaces. May not be accurate.
  # faux_tabs: (Boolean) Enable simulation of tabs? (Default: false)
  # faux_tabs: false
  # faux_tabs_window_min: (Integer) Assumed minimum character width of the display area
  #                       for tab calculation. (Default: 80)
  # faux_tabs_window_min: 80
  # faux_tabs_window_max: (Integer) Assumed maximum character width for tab calculation. (Default: 120)
  # faux_tabs_window_max: 120

  # --- Asset ID Generation ---
  # asset_start_index: (Integer) Starting number for generated numeric IDs for assets
  #                    (images, objects) if 'asset_use_index_in_url' is true. (Default: 1)
  # asset_start_index: 1
  # asset_use_index_in_url: (Boolean) Use a generated numeric index (starting from 'asset_start_index')
  #                          as the {input} value for the 'image' export location, instead of the
  #                          original filename? Example: image path becomes ".../images/1.png", ".../images/2.wmf".
  #                          Requires the 'image.url' or final web server configuration to handle
  #                          requests based on these numeric IDs. Primarily useful if original filenames
  #                          are problematic or if you want obfuscated URLs. Requires significant
  #                          manual work or post-processing to update links in HTML/XML. (Default: false)
  # asset_use_index_in_url: false

  # ---------------------------------------------------------------------------
  # Deprecated / Legacy Options (Prefer using 'export_locations')
  # ---------------------------------------------------------------------------
  # These top-level keys might still work but are superseded by the more flexible
  # 'export_locations' section. Avoid using them if possible.

  # infobase_dir: (String) @Deprecated. Base directory for resolving relative infobase 'path' values.
  #                 Defaults to the directory containing this YAML file. Prefer relative paths
  #                 or absolute paths (starting with /data in Docker) directly in 'infobases.path'.
  # infobase_dir: /legacy/path/to/infobases

  # export_dir: (String) @Deprecated. Base export directory if 'export_locations.default.path'
  #             is not fully defined or missing. Prefer defining 'export_locations.default.path'.
  # export_dir: /legacy/path/to/default_exports

  # index_dir: (String) @Deprecated. Default path for the *combined* Lucene index if multiple infobases
  #              are indexed together AND 'export_locations.luceneindex.path' is not specified.
  #              Prefer defining 'export_locations.luceneindex.path'.
  # index_dir: /legacy/path/to/default_combined_index

# --- End of Configuration Set 'folio_help' --- 